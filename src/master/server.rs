use futures::{future, prelude::*};
use mapreduce::master::Master;
use mapreduce::master::MasterService;
use std::net::IpAddr;
use std::net::Ipv6Addr;
use tarpc::{
    server::{self, Channel, incoming::Incoming},
    tokio_serde::formats::Json,
};

#[derive(Clone)]
struct MasterServer(Master, pub (IpAddr, u16));

impl MasterServer {
    pub fn new() -> Self {
        MasterServer(Master::new(), (IpAddr::V6(Ipv6Addr::LOCALHOST), 5152))
    }
}

impl MasterService for MasterServer {
    async fn call_home(self, _context: tarpc::context::Context) -> bool {
        true
    }

    async fn update_task(self, _context: tarpc::context::Context) {}
}

async fn spawn(fut: impl Future<Output = ()> + Send + 'static) {
    tokio::spawn(fut);
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let master_server = MasterServer::new();

    let server_addr = master_server.1;

    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default).await?;
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            channel
                .execute(master_server.clone().serve())
                .for_each(spawn)
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}
