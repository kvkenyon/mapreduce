//! src/master/lib.rs
use crate::configuration::Settings;
use crate::master::MasterService;
use crate::{mapreduce::InputSplit, spec::MapReduceOutput, worker::WorkerId};
use futures::{future, prelude::*};
use tarpc::{
    server::{self, incoming::Incoming, Channel},
    tokio_serde::formats::Json,
};
use uuid::Uuid;
#[derive(Clone, Debug, PartialEq)]
pub enum TaskState {
    Idle,
    InProgress,
    Completed,
}

#[derive(Clone, Debug)]
pub struct MapTask {
    pub task_id: Uuid,
    pub state: TaskState,
    pub worker_id: Option<WorkerId>,
    pub input_split: InputSplit,
}

#[derive(Clone, Debug)]
pub struct ReduceTask {
    pub task_id: Uuid,
    pub state: TaskState,
    pub worker_id: Option<WorkerId>,
    pub output: MapReduceOutput,
    pub input_location: Option<String>,
}

#[derive(Clone, Debug)]
pub struct Master {}

#[allow(unused)]
impl Master {
    pub fn new() -> Self {
        Master {}
    }
}

impl Default for Master {
    fn default() -> Self {
        Self::new()
    }
}

#[allow(unused)]
#[derive(Clone)]
pub struct MasterServer {
    master: Master,
    host: String,
    port: u16,
}

impl MasterServer {
    pub async fn build(config: Settings) -> anyhow::Result<Self> {
        let master_server = MasterServer {
            host: config.rpc.host,
            port: config.rpc.port,
            master: Master::new(),
        };
        Ok(master_server)
    }

    pub async fn run_until_stopped(&self) -> anyhow::Result<()> {
        let server_addr = format!("{}:{}", self.host, self.port);
        let mut listener = tarpc::serde_transport::tcp::listen(server_addr, Json::default).await?;
        listener.config_mut().max_frame_length(usize::MAX);
        listener
            // Ignore accept errors.
            .filter_map(|r| future::ready(r.ok()))
            .map(server::BaseChannel::with_defaults)
            // Limit channels to 1 per IP.
            .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
            // serve is generated by the service attribute. It takes as input any type implementing
            // the generated World trait.
            .map(|channel| channel.execute(self.clone().serve()).for_each(spawn))
            // Max 10 channels.
            .buffer_unordered(10)
            .for_each(|_| async {})
            .await;
        Ok(())
    }
}

impl MasterService for MasterServer {
    async fn call_home(self, _context: tarpc::context::Context) -> bool {
        true
    }

    async fn update_task(self, _context: tarpc::context::Context) {}
}

async fn spawn(fut: impl Future<Output = ()> + Send + 'static) {
    tokio::spawn(fut);
}
